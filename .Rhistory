library(Seurat)
library(SeuratDisk)
gc()
}
init()
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
sal <- sampleIntegrated@assays$SAL@counts
sal <- sampleIntegrated@assays$SAL
sal@scale.data
View(sal)
View(rna)
view(rna@counts)
View(rna@counts)
rna@counts
view(rna@counts)
view(rna@counts)
view(rna@counts)
view(rna@data)
stuff <- rna@counts
View(stuff)
rna[]
rna[colnames()]
rna[colnames(rna)]
colnames(rna)
,!
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
pbmc <- subset(rna, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
sampleIntegrated$nCount_RNA
sampleIntegrated$
pbmc <- subset(rna, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
sampleIntegrated <- subset(sampleIntegrated, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
View(sampleIntegrated)
View(sampleIntegrated)
sampleIntegrated <- NormalizeData(sampleIntegrated, normalization.method = "LogNormalize")
cluster.averages <- AverageExpression(sampleIntegrated)
head(cluster.averages[["RNA"]][, 1:5])
rna <- sampleIntegrated@assays$RNA
rna@counts
rna@counts@i
sampleIntegrated$nCount_RNA
sampleIntegrated@project.name
sampleIntegrated@assays$SAL@var.features
sampleIntegrated@assays$RNA@var.features
install.packages('tidyverse')
install.packages('tidyverse')
gc()
install.packages('tidyverse')
install.packages('tidyverse')
install.packages(tidyseurat)
install.packages('tidyseurat')
help("::")
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
tidyseurat::sampleIntegrated
tidyseurat::pbmc_small
pbmc_small <_ tidyseurat::pbmc_small
pbmc_small <- tidyseurat::pbmc_small
pbmc_small
pbmc_small@assays$RNA
pbmc_small_pca <-
pbmc_small_polished %>%
SCTransform(verbose = FALSE) %>%
FindVariableFeatures(verbose = FALSE) %>%
RunPCA(verbose = FALSE)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
view(sampleIntegrated@assays$RNA)
view(sampleIntegrated@assays$RNA)
view(sampleIntegrated@assays$RNA@counts)
View(sampleIntegrated@assays$RNA@counts)
sampleIntegrated@assays$RNA@counts
NormalizeData(object = sampleIntegrated, assay = "RNA")
NormalizeData(object = sampleIntegrated, assay = "RNA")
library(Seurat)
NormalizeData(object = sampleIntegrated, assay = "RNA")
rna <- sampleIntegrated@assays$RNA
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 2000) # ideally a 5 to 1 cell to feature?
sampleIntegrated[[]]
sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 1000)
sampleIntegrated@assays$RNA@var.features
sampleIntegrated[['percent_mito']]
sampleIntegrated[['nFeature_HTO']]
sampleIntegrated[['nFeature_SAL']]
sampleIntegrated[['nFeature_RNA']]
sampleIntegrated[['origin_indent']]
sampleIntegrated[['origin_inden']]
sampleIntegrated[['nCount_RNA']]
cov(rna)
?cova
?cov
cov(rna@counts)
cov(rna@data)
rna
rna@scale.data
rna@counts
cov(as.matrix(rna@counts))
library(Seurat)
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
sampleIntegrated['percent_mt']
sampleIntegrated$percent.mt
sampleIntegrated[percent_mt]
sampleIntegrated[['ribosomal']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RT-")
sampleIntegrated$ribosomal
sampleIntegrated[['ribosomal']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RPS")
sampleIntegrated$ribosomal
sampleIntegrated[['RPS']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RPS")
sampleIntegrated$RPS
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
VlnPlot(sampleIntegrated, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# select only cells which have over 200 RNA genes but less than 2500. and cells that contain over 1000 UMIs
selected <- WhichCells(sampleIntegrated, expression = nCount_RNA > 1000 & nFeature_RNA > 1000 & nFeature_RNA < 3000 & percent.mt < 5)
plot2
plot1
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = RNA)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays$RNA, feature1 = "nCount_RNA", feature2 = "percent.mt", cells)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays$RNA, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = sampleIntegrated@assays$RNA)
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "percent.mt", feature2 = "nFeature_RNA")
plot2
# select only cells which have over 200 RNA genes but less than 2500. and cells that contain over 1000 UMIs
selected <- WhichCells(sampleIntegrated, expression = nCount_RNA > 1000 & nFeature_RNA > 1000 & nFeature_RNA < 3000 & percent.mt >1.5)
rownames(sampleIntegrated[['ADT']])
rownames(sampleIntegrated[['SAL']])
rownames(sampleIntegrated[['RNA']])
DefaultAssay(sampleIntegrated)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = sampleIntegrated@assays$RNA)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", pt.size = 1)
plot1
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = .5)
plot2
colnames(sampleIntegrated)
rownames(sampleIntegrated)
sampleIntegrated[percent_mt]
sampleIntegrated[['percent_mt']]
sampleIntegerated <- NormalizeData(object = sampleIntegrated, assay = "RNA") # make sure they are on comparable scale
library('rdist')
b <- 10:15
b
b[1, 2+1, ]
b[1, 2+1 ]
b[1: 2+1 ]
b[1: 2+1,  ]
b[1: 2+1, ]
b[1:2+1, ]
b[1:2, ]
b[1:2]
b[2:2]
b[2:5]
b <- 15: 11
b
apply(b, 1, sort)
lapply(b, 1, sort)
lapply(b, sort)
b<- lapply(b, sort)
b
b
class(b)
b[1]
b[[2]]
b$2
b[[2]]
b<- lapply(b, sort(decreasing = TRUE))
b<- lapply(b, sort(b,decreasing = TRUE))
D = matrix(runif(400), nrow=20)
D
class(d)
class(D)
sortedColumns <- as.matrix(t(apply(D, 2, sort)))
sortedColumns
View(sortedColumns)
sortedColumns[, 1:15]
dim(D[1])
dim(D)
1:dim(x)[1]
1:dim(D)[1]
D[, 2]
View(D)
D[3, ] <- 10
D[3, ]
D[3, 2:3 ] <- 1:2
D[3, ]
diag(m)
diag(D)
setwd("C:/Users/alexw/School/R-work/BREM")
setwd("C:/Users/alexw/School/R-work/BREM")
data <- Read10X("./filtered_feature_bc_matrix")
library(Seurat)
data <- Read10X("./filtered_feature_bc_matrix")
pbmc.rna <- CreateAssayObject(counts = data$`Gene Expression`)
pbmc.sal <- CreateAssayObject(counts = data$`Antibody Capture`)
pbmc.sal
view(pbmc.sal)
View(pbmc.sal@counts)
view(pbmc.sal@counts)
view(pbmc.sal@counts)
View(pbmc.sal@counts)
mat <- as.matrix(pbmc.sal@counts)
View(mat)
result <- vector("list", length = 7865)
View(result)
result[[j]] <- 1
result[[1]] = 1
load("C:/Users/alexw/School/R-work/BREM/pbmcBREM.Rdata")
View(result)
result[["posteriorProb"]]
view(result$posteriorProb)
view(result$posteriorProb)
View(result$posteriorProb)
plot(result$vecLogLik, type = "l", xlab = "MCMC Iterations", ylab = "Log likelihood")
plot(pbmc.sal)
view(pbmc.sak)
view(pbmc.sal)
View(pbmc.sal@counts)
View(pbmc.sal@data)
View(as.matrix(pbmc.sal@counts))
view(mat)
View(mat)
plot(mat[1 , ], mat[8, ])
plot(mat[1 , ], mat[8, ], ylab = 'cd19', xlab = 'cd3')
plot(log(mat[1 , ]), log(mat[8, ]), ylab = 'cd19', xlab = 'cd3')
plot(log(mat[1 , ]), log(mat[8, ]), ylab = 'log CD19', xlab = ' log CD3')
plot(log(sal.matrix[1 , ]), log(sal.matrix[8, ]), pch='.', ylab = 'log CD19', xlab = ' log CD3')
plotBCells <- function(sal.matrix) {
plot(log(sal.matrix[1 , ]), log(sal.matrix[8, ]), pch='.', ylab = 'log CD19', xlab = ' log CD3')
}
plotBCells(mat)
plotBCells <- function(sal.matrix) {
plot(log(sal.matrix[1 , ]), log(sal.matrix[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3')
}
plot(log(mat[1 , ]), log(mat[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3')
plot(log(mat[1 , ]), log(mat[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells')
plot(log(mat[1 , ]), log(mat[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
plot(log(mat[1 , ]), log(mat[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
plot(log(mat[2 , ]), log(mat[8, ]), pch=20, ylab = 'log CD4', xlab = ' log CD8a', main = 'T cells - 6/3')
plot(log(mat[1 , ]), log(mat[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
bcells <- plot(log(mat[1 , ]), log(mat[8, ]), pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
bcells <- lines(bcells, 6.6)
bcells <- lines(bcells, y=6.6)
x <- log(mat[1 , ])
y <- log(mat[8, ])
bcells <- plot(x, y, type="n", pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
lines(x, y, type=opts[i])
lines(x, y, type='dotted')
lines(x, y)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(abline(v=6.4, col="blue"))
abline(v=15, col="blue", lty = 2)
abline(v=15, col="blue", lty = 1)
abline(v=15, col="blue", lty = 2)
abline(v=15, col="blue", lwd = 3, lty = 2)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=15, col="blue", lwd = 3, lty = 2)
abline(v=15, col="blue", lwd = 3, lty = 2)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=15, col="blue", lty = 2)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=15, col="blue")
abline(v=6.4, col="blue")
abline(v=6.4, col="blue", lty = 2)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=6.4, col="blue", lty = 2)
abline(h=c(5.5,3), col="red", lty= 2)
abline(v=c(6.3,4.5), col="blue", lty = 2)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=c(6.3,4.5), col="blue", lty = 2)
abline(h=c(5.5,3), col="red", lty= 2)
bcells <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=c(6.25,4.5), col=c("blue","red"), lty = 2)
abline(h=c(5.5,3), col=c("blue", "red"), lty= 2)
plot(log(mat[2 , ]), log(mat[8, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
bcell.plot <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
bcell.plot <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=c(6.25,4.5), col=c("blue","red"), lty = 2)
abline(h=c(5.5,3), col=c("blue", "red"), lty= 2)
abline(v=c(6.25,4.5), col=c("blue","blue"), lty = 2)
abline(h=c(5.5,3), col=c("red", "red"), lty= 2)
bcells <- subset(mat, x < 4.5 & y > 5.5 )
bcells <- mat[, which(mat[1, ] < 4.5 & mat[8, ] > 5.5)]
bcells
View(bcells)
row.names(mat)[which(mat[1, ] < 4.5)]
col.names(mat)[which(mat[1, ] < 4.5)]
colnames(mat)[which(mat[1, ] < 4.5)]
bcells <- colnames(mat)[which(mat[1, ] < 4.5)]
bcells <- colnames(mat)[which(mat[1, ] < 4.5) & mat[8, ] > 5.5]
bcells
bcells <- colnames(mat)[which(mat[8, ] > 5.5 & mat[1, ] < 4.5) ]
bcells
bcells <- colnames(mat)[which(mat[1, ] < 4.5 & mat[8, ] > 5.5)]
bcells <- colnames(mat)[which(mat[1, ] < 4.5 & mat[8, ] > 5.5)]
bcells <- subset(mat, x < 4.5 & y > 5.5 )
bcells <- colnames(mat)[which(log(mat[1, ]) < 4.5 & log(mat[8, ] > 5.5))]
bcells <- colnames(mat)[which(x < 4.5 & log(mat[8, ] > 5.5))]
bcells <- colnames(mat)[which(x < 4.5 & y > 5.5]
bcells <- subset(mat, x < 4.5 & y > 5.5 )
bcells <- mat[, which(mat[1, ] < 4.5 & mat[8, ] > 5.5)]
}
plotTCells <- function(mat) {
plot(log(mat[2 , ]), log(mat[8, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
}
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("mojaveazure/seurat-disk")
install_github("tarot0410/BREMSC")
library(dplyr)
library(Seurat)
library(SeuratDisk)
library(BREMSC)
library(factoextra)
library(NbClust)
setwd("C:/Users/alexw/School/R-work/BREM")
data <- Read10X("./filtered_feature_bc_matrix")
pbmc.rna <- CreateAssayObject(counts = data$`Gene Expression`)
pbmc.sal <- CreateAssayObject(counts = data$`Antibody Capture`)
pbmcCombined <- CreateSeuratObject(counts = pbmc.rna)
pbmcCombined[['SAL']] <- pbmc.sal # add an assay
cluster <- function(SALmatrix) {
result <- vector("list", length = 7865)
for(j in 1:ncol(SALmatrix)) {       # for-loop over cells
for(i in 1: nrow(SALmatrix)) {
if(data[i,j] > log(400)) {
result[[j]] <- 1  # B cell
break;
}
data1[i, j] <- data1[i , j] + 10
}
}
}
## Need to cluster the cells based on cell surface markers
# log(CD3+1) is < 4.XX AND log(CD19+1) is > 5.8X, it is B cell.
### NEED TO REPROD THE ARI AND AMI results. USE SAME PREFILTERING.
plot1 <- FeatureScatter(pbmcCombined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
pbmcCombined <- subset(pbmcCombined, subset = nFeature_RNA > 300 & nFeature_RNA < 5000)
pbmc.rna <- NormalizeData(pbmcCombined@assays$RNA)
pbmc.sal <- NormalizeData(pbmcCombined@assays$SAL)
# remove 3 protein markers from the ADT
SALcounts <- GetAssayData(pbmc.sal)
SALcounts <- SALcounts[-(which(rownames(SALcounts) %in% c('CD8a-TotalSeqB','CD16-TotalSeqB','CD127-TotalSeqB'))),]
pbmc.sal <- subset(pbmc.sal, features = rownames(SALcounts))
### We identified seven cell types based on the biological knowledge of both protein and gene markers as the approximate
#truth, which is illustrated in Supplementary Figure S1. Examples of such cell type identification procedure are shown
#in Supplementary Figure S2. Taken together, >80% of single cells can be assigned to a specific cell type. Cells with
#uncertain cell types (not identified in the ground truth) were
#removed from computing ARIs and AMIs.
###
pbmc.rna <- FindVariableFeatures(pbmcCombined@assays$RNA, selection.method = "vst", nfeatures = 1000)
pbmc.rna <- ScaleData(pbmc.rna)
rnaReduc <- RunPCA(pbmc.rna, features = VariableFeatures(object = pbmc.rna))
var_genes <- VariableFeatures(pbmc.rna)
rmatrix <- t(as.matrix(
GetAssayData(pbmc.rna)[var_genes,]
))
smatrix <- t(as.matrix(pbmc.sal@counts))
rmatrix <- t(rmatrix)
smatrix <- t(smatrix)
# max(rmatrix['JCHAIN', ])
# seven cell types
result <- BREMSC(smatrix, rmatrix, K=7, nChains=3, nMCMC=500)
View(result$posteriorProb)
save(result, file = "pbmcBREM.Rdata")
# remove the 20% of cells that did not map to one of the 7 clusters.
plot(result$vecLogLik, type = "l", xlab = "MCMC Iterations", ylab = "Log likelihood")
.test = function() {
data("dataADT")
data("dataRNA")
testRun_BREMSC = BREMSC(dataADT, dataRNA, K=4, nChains=3, nMCMC=100)
plot(testRun_BREMSC$vecLogLik, type = "l", xlab = "MCMC Iterations", ylab = "Log likelihood")
}
bcells <- colnames(mat)[which(x < 4.5 & y > 5.5)]
rm(smatrix, rmatrix)
rm(var_genes)
rm cluster()
rm(cluster)
rm(data)
rm(plot1)
plot(result$vecLogLik, type = "l", xlab = "MCMC Iterations", ylab = "Log likelihood")
plot(result$vecLogLik, type = "l", xlab = "MCMC Iterations", ylab = "Log likelihood")
bcells <- subset(mat, x < 4.5 & y > 5.5 )
bcells <- colnames(mat)[which(x < 4.5 & y > 5.5)]
bcells <- colnames(mat)[which(x < 4.5 & TRUE )]
bcells <- colnames(mat)[which(x < 4.5 & log(mat[8, ]) > 5.5)]
bcells <- colnames(mat)[which(x < 4.5 & y > 5.5)]
which(x < 4.5 & y > 5.5)
test <- which(x < 4.5 & y > 5.5)
test
rm(test)
bcells <- mat[, which(log(mat[1, ]) < 4.5 & log(mat[8, ]) > 5.5)]
bcells <- colnames(mat)[which(x < 4.5 & y > 5.5)]
plot(log(mat[2 , ]), log(mat[3, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
plot(log(bcells[2 , ]), log(bcells[3, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
bcellmat <- mat[, which(log(mat[1, ]) < 4.5 & log(mat[8, ]) > 5.5)]
plot(log(bcellsma[2 , ]), log(bcellsmat[3, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
plot(log(bcellsmat[2 , ]), log(bcellsmat[3, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
bcell.mat <- mat[, which(log(mat[1, ]) < 4.5 & log(mat[8, ]) > 5.5)]
rm(bcellmat)
plot(log(bcell.mat[2 , ]), log(bcell.mat[3, ]), pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
x <- log(mat[2, ])
y <- log(mat[3, ])
plot(x, y, pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
bcell.mat <- mat[, which(log(mat[1, ]) < 4.5 & log(mat[8, ]) > 5.5)]
bcell.plot <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=c(6.25,4.5), col=c("blue","blue"), lty = 2) # cd3
abline(h=c(5.5,3), col=c("red", "red"), lty= 2) # cd19
# top left is B cells
x <- log(mat[1 , ])
y <- log(mat[8, ])
bcell.plot <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells - 6/3')
abline(v=c(6.25,4.5), col=c("blue","blue"), lty = 2) # cd3
abline(h=c(5.5,3), col=c("red", "red"), lty= 2) # cd19
rm(bcell.mat)
tcells <- colnames(mat)[which(x > 6.25 & y < 3)]
x <- log(tcells[2, ])
tcells.mat <- mat[, which(x > 6.25 & y < 3)]
x <- log(tcells.mat[2, ])
y <- log(tcells.mat[3, ])
plot(x, y, pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
abline(v=c(7,4.5), col=c("blue","blue"), lty = 2) # cd4
abline(h=c(6.3,5), col=c("red", "red"), lty= 2) # cd8a
abline(h=c(6.5,5), col=c("red", "red"), lty= 2) # cd8a
plot(x, y, pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells - 6/3')
abline(v=c(7,4.5), col=c("blue","blue"), lty = 2) # cd4
abline(h=c(6.5,5), col=c("red", "red"), lty= 2) # cd8a
# CD 4+
cd4tcells <- colnames(tcells.mat)[which(x < 6 & y < 5)]
# CD 8+
cd8tcells <- colnames(tcells.mat)[which(x < 4.5 & y > 6.5)]
length(cd8tcells)
length(cd4tcells)
# CD 4+
cd4tcells <- colnames(tcells.mat)[which(x > 6 & y < 5)]
lengt(cd4tcells)
length(cd4tcells)
# CD 4+
cd4tcells <- colnames(tcells.mat)[which(x > 7 & y < 5)]
length(cd4tcells)
monocyte.plot <- plot(x, y, pch=20, ylab = 'log CD14', xlab = ' log CD16', main = 'B cells - 6/3')
monocyte.plot <- plot(x, y, pch=20, ylab = 'log CD14', xlab = ' log CD16', main = 'Monocytes -')
monocyte.plot <- plot(x, y, pch=20, xlab = 'log CD14', ylab = ' log CD16', main = 'Monocytes -')
# cd14, cd16
remainingcells <- mat[, !list(bcells, cd4tcells, cd8tcells)]
# cd14, cd16
remainingcells <- mat[, !list(bcells, cd4tcells, cd8tcells)]
# cd14, cd16
remainingcells <- mat[, list(bcells, cd4tcells, cd8tcells)]
# cd14, cd16
remainingcells <- mat[, bcells, cd4tcells, cd8tcells]
# cd14, cd16
temp <- c(bcells,cd4tcells,cd8tcells)
remainingcells <- mat[, temp]
# cd14, cd16
notNeeded <- c(bcells,cd4tcells,cd8tcells)
rm(temp)
remaining <- subset(mat, select=-notNeeded)
remaining <- subset(mat, select= -c(bcells,cd4tcells,cd8tcells))
remaining <- subset(mat, select= c(bcells,cd4tcells,cd8tcells))
rm(remaining)
rm(remainingcells)
names(mat)
colnames(mat)
remaining <- max[, -which(colnames(mat) %in% notNeeded)]
remaining <- mat[, -which(colnames(mat) %in% notNeeded)]
rm(remaining)
remaininCells <- mat[, -which(colnames(mat) %in% notNeeded)]
rm(remaininCells)
remainingCells <- mat[, -which(colnames(mat) %in% notNeeded)]
mat[,, !notNeeded]
# use %in% instead bc different length vectors
x <- log(remainingCells)
y <- log(remainingCells[6, ])
# use %in% instead bc different length vectors
x <- log(remainingCells[4, ])
monocyte.plot <- plot(x, y, pch=20, xlab = 'log CD14', ylab = ' log CD16', main = 'Monocytes -')
abline(v=c(6,4), col=c("blue","blue"), lty = 2) # cd3
abline(h=c(6,5), col=c("red", "red"), lty= 2) # cd19
notNeeded <- c(bcells,tcells)
remainingCells <- mat[, -which(colnames(mat) %in% notNeeded)] # take subset that are not in notNeeded
# use %in% instead bc different length vectors
x <- log(remainingCells[4, ]) # cd14
y <- log(remainingCells[6, ]) # cd16
monocyte.plot <- plot(x, y, pch=20, xlab = 'log CD14', ylab = ' log CD16', main = 'Monocytes -')
notNeeded <- c(bcells,cd4tcells,cd8tcells)
remainingCells <- mat[, -which(colnames(mat) %in% notNeeded)] # take subset that are not in notNeeded
# use %in% instead bc different length vectors
x <- log(remainingCells[4, ]) # cd14
y <- log(remainingCells[6, ]) # cd16
monocyte.plot <- plot(x, y, pch=20, xlab = 'log CD14', ylab = ' log CD16', main = 'Monocytes -')
