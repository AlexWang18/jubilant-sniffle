library(seuratDisk)
install_github("mojaveazure/seurat-disk")
data <- load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
l\
getwd()
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(abSNF)
library(Seurat)
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(abSNF)
library(Seurat)
library(SeuratDisk)
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(abSNF)
library(Seurat)
library(SeuratDisk)
if(!require(devtools)) install.packages("devtools")
init()
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
sampleIntegrated <- NormalizeData(sampleIntegrated)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 1000)
rna <- ScaleData(object = rna)
scaledRNA <- rna@scale.data
head(scaledRNA, 10)
rna <- RunPCA(rna, features = VariableFeatures(object = rna)) # why is returning at DimReduc
sal <- sampleIntegrated@assays$SAL@counts
sal <- NormalizeData(sal)
# calc boosted distance
scaledRNA <- t(scaledRNA)
sal <- t(as.matrix(sal))
rna2 <- rdist(scaledRNA, metric = "euclidean", p = 2L)
sal2 <- rdist(sal, metric = "euclidean", p = 2L)
# Next, construct similarity graphs
graphRNA = affinityMatrix(rna2)
graphSAL= affinityMatrix(sal2)
list <- list(graphRNA, graphSAL) # each element of the list should be a square
fused = SNF(list, 20, 20) # 20 neighbors, 20 iterations of the diffusion
#
W = SNF(list(W1,W2), 20, 20)
k
l
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
sampleIntegrated <- NormalizeData(sampleIntegrated)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 1000)
rna <- ScaleData(object = rna)
scaledRNA <- rna@scale.data
head(scaledRNA, 10)
rna <- RunPCA(rna, features = VariableFeatures(object = rna)) # why is returning at DimReduc
sal <- sampleIntegrated@assays$SAL@counts
sal <- NormalizeData(sal)
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
sampleIntegrated <- NormalizeData(sampleIntegrated)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 1000)
rna <- ScaleData(object = rna)
scaledRNA <- rna@scale.data
head(scaledRNA, 10)
rna <- RunPCA(rna, features = VariableFeatures(object = rna)) # why is returning at DimReduc
sal <- sampleIntegrated@assays$SAL@counts
sal <- NormalizeData(sal)
rna2 <- rdist(scaledRNA, metric = "euclidean", p = 2)
nice
kl
rna2
rna2 <- pdist(scaledRNA, metric = "euclidean", p = 2)
d
h
rna2
View(rna2)
sal2 <- pdist(sal, metric = "euclidean", p = 2)
View(sal2)
# Next, construct similarity graphs
graphRNA = affinityMatrix(rna2)
graphSAL= affinityMatrix(sal2)
View(graphRNA)
View(sampleIntegrated)
View(sampleIntegrated)
sampleIntegrated$nCount_SAL
sampleIntegrated$nFeature_SAL
sampleIntegrated@graphs$integrated_nn
salDist <- pdist(sal, metric = "euclidean", p = 2)
getClass(salDist)
View(sal2)
getClass(sal2, FORCE=TRUE)
nrow(sal2)
nrow(rna2)
rnaDist <- rna2
rm(rna2)
rnaDist
nrows(rna)
nrow(rna)
View(scaledRNA)
View(scaledRNA)
View(sal)
as
f
View(rnaDist)
View(rnaDist)
nrow(rnaDist)
nrow(rna)
nrow(scaledRNA)
rm(sal2)
nrow(salDist)
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
sal <- sampleIntegrated@assays$SAL@counts
sal <- sampleIntegrated@assays$SAL
sal@scale.data
View(sal)
View(rna)
view(rna@counts)
View(rna@counts)
rna@counts
view(rna@counts)
view(rna@counts)
view(rna@counts)
view(rna@data)
stuff <- rna@counts
View(stuff)
rna[]
rna[colnames()]
rna[colnames(rna)]
colnames(rna)
,!
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
pbmc <- subset(rna, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
sampleIntegrated$nCount_RNA
sampleIntegrated$
pbmc <- subset(rna, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
sampleIntegrated <- subset(sampleIntegrated, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
View(sampleIntegrated)
View(sampleIntegrated)
sampleIntegrated <- NormalizeData(sampleIntegrated, normalization.method = "LogNormalize")
cluster.averages <- AverageExpression(sampleIntegrated)
head(cluster.averages[["RNA"]][, 1:5])
rna <- sampleIntegrated@assays$RNA
rna@counts
rna@counts@i
sampleIntegrated$nCount_RNA
sampleIntegrated@project.name
sampleIntegrated@assays$SAL@var.features
sampleIntegrated@assays$RNA@var.features
install.packages('tidyverse')
install.packages('tidyverse')
gc()
install.packages('tidyverse')
install.packages('tidyverse')
install.packages(tidyseurat)
install.packages('tidyseurat')
help("::")
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
tidyseurat::sampleIntegrated
tidyseurat::pbmc_small
pbmc_small <_ tidyseurat::pbmc_small
pbmc_small <- tidyseurat::pbmc_small
pbmc_small
pbmc_small@assays$RNA
pbmc_small_pca <-
pbmc_small_polished %>%
SCTransform(verbose = FALSE) %>%
FindVariableFeatures(verbose = FALSE) %>%
RunPCA(verbose = FALSE)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
view(sampleIntegrated@assays$RNA)
view(sampleIntegrated@assays$RNA)
view(sampleIntegrated@assays$RNA@counts)
View(sampleIntegrated@assays$RNA@counts)
sampleIntegrated@assays$RNA@counts
NormalizeData(object = sampleIntegrated, assay = "RNA")
NormalizeData(object = sampleIntegrated, assay = "RNA")
library(Seurat)
NormalizeData(object = sampleIntegrated, assay = "RNA")
rna <- sampleIntegrated@assays$RNA
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 2000) # ideally a 5 to 1 cell to feature?
sampleIntegrated[[]]
sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 1000)
sampleIntegrated@assays$RNA@var.features
sampleIntegrated[['percent_mito']]
sampleIntegrated[['nFeature_HTO']]
sampleIntegrated[['nFeature_SAL']]
sampleIntegrated[['nFeature_RNA']]
sampleIntegrated[['origin_indent']]
sampleIntegrated[['origin_inden']]
sampleIntegrated[['nCount_RNA']]
cov(rna)
?cova
?cov
cov(rna@counts)
cov(rna@data)
rna
rna@scale.data
rna@counts
cov(as.matrix(rna@counts))
library(Seurat)
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
sampleIntegrated['percent_mt']
sampleIntegrated$percent.mt
sampleIntegrated[percent_mt]
sampleIntegrated[['ribosomal']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RT-")
sampleIntegrated$ribosomal
sampleIntegrated[['ribosomal']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RPS")
sampleIntegrated$ribosomal
sampleIntegrated[['RPS']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RPS")
sampleIntegrated$RPS
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
VlnPlot(sampleIntegrated, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# select only cells which have over 200 RNA genes but less than 2500. and cells that contain over 1000 UMIs
selected <- WhichCells(sampleIntegrated, expression = nCount_RNA > 1000 & nFeature_RNA > 1000 & nFeature_RNA < 3000 & percent.mt < 5)
plot2
plot1
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = RNA)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays$RNA, feature1 = "nCount_RNA", feature2 = "percent.mt", cells)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays$RNA, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = sampleIntegrated@assays$RNA)
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "percent.mt", feature2 = "nFeature_RNA")
plot2
# select only cells which have over 200 RNA genes but less than 2500. and cells that contain over 1000 UMIs
selected <- WhichCells(sampleIntegrated, expression = nCount_RNA > 1000 & nFeature_RNA > 1000 & nFeature_RNA < 3000 & percent.mt >1.5)
rownames(sampleIntegrated[['ADT']])
rownames(sampleIntegrated[['SAL']])
rownames(sampleIntegrated[['RNA']])
DefaultAssay(sampleIntegrated)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = sampleIntegrated@assays$RNA)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", pt.size = 1)
plot1
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = .5)
plot2
colnames(sampleIntegrated)
rownames(sampleIntegrated)
sampleIntegrated[percent_mt]
sampleIntegrated[['percent_mt']]
sampleIntegerated <- NormalizeData(object = sampleIntegrated, assay = "RNA") # make sure they are on comparable scale
library('rdist')
b <- 10:15
b
b[1, 2+1, ]
b[1, 2+1 ]
b[1: 2+1 ]
b[1: 2+1,  ]
b[1: 2+1, ]
b[1:2+1, ]
b[1:2, ]
b[1:2]
b[2:2]
b[2:5]
b <- 15: 11
b
apply(b, 1, sort)
lapply(b, 1, sort)
lapply(b, sort)
b<- lapply(b, sort)
b
b
class(b)
b[1]
b[[2]]
b$2
b[[2]]
b<- lapply(b, sort(decreasing = TRUE))
b<- lapply(b, sort(b,decreasing = TRUE))
D = matrix(runif(400), nrow=20)
D
class(d)
class(D)
sortedColumns <- as.matrix(t(apply(D, 2, sort)))
sortedColumns
View(sortedColumns)
sortedColumns[, 1:15]
dim(D[1])
dim(D)
1:dim(x)[1]
1:dim(D)[1]
D[, 2]
View(D)
D[3, ] <- 10
D[3, ]
D[3, 2:3 ] <- 1:2
D[3, ]
diag(m)
diag(D)
load("~/.RData")
memory.limit(888888)
load("~/.RData")
rm(list=ls())
setwd("C:/Users/alexw/School/R-work/BREM")
data <- Read10X("./filtered_feature_bc_matrix")
pbmc.rna <- CreateAssayObject(counts = data$`Gene Expression`)
pbmc.sal <- CreateAssayObject(counts = data$`Antibody Capture`)
pbmcCombined <- CreateSeuratObject(counts = pbmc.rna)
pbmcCombined[['SAL']] <- pbmc.sal # add an assay
mat <- as.matrix(pbmc.sal@counts)
library(Seurat)
library(SeuratDisk)
library(BREMSC)
setwd("C:/Users/alexw/School/R-work/BREM")
data <- Read10X("./filtered_feature_bc_matrix")
pbmc.rna <- CreateAssayObject(counts = data$`Gene Expression`)
pbmc.sal <- CreateAssayObject(counts = data$`Antibody Capture`)
pbmcCombined <- CreateSeuratObject(counts = pbmc.rna)
pbmcCombined[['SAL']] <- pbmc.sal # add an assay
mat <- as.matrix(pbmc.sal@counts)
# plot1 <- FeatureScatter(pbmcCombined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
sub <- matrix(unique(clusteredCells), ncol=1) # take only classified cells
pbmcCombined <- pbmcCombined[, sub[, 1]]
pbmc.rna <- NormalizeData(pbmcCombined@assays$RNA)
pbmc.sal <- NormalizeData(pbmcCombined@assays$SAL)
# remove 3 protein markers from the ADT
SALcounts <- GetAssayData(pbmc.sal)
# select rows besides those listed
SALcounts <- SALcounts[-(which(rownames(SALcounts) %in% c('CD8a-TotalSeqB','CD16-TotalSeqB','CD127-TotalSeqB'))),]
pbmc.sal <- subset(pbmc.sal, features = rownames(SALcounts))
rm(SALcounts)
pbmc.rna <- FindVariableFeatures(pbmcCombined@assays$RNA, selection.method = "vst", nfeatures = 1000)
pbmc.rna <- ScaleData(pbmc.rna)
var_genes <- VariableFeatures(pbmc.rna)
rmatrix <- t(as.matrix(
GetAssayData(pbmc.rna)[var_genes,]
))
rm(var_genes)
smatrix <- t(as.matrix(pbmc.sal@counts))
rmatrix <- t(rmatrix)
smatrix <- t(smatrix)
# seven cell types
result4 <- BREMSC(smatrix, rmatrix, K=7, nChains=3, nMCMC=500)
x <- log(mat[1 , ])
y <- log(mat[8, ])
bcell.plot <- plot(x, y, pch=20, ylab = 'log CD19', xlab = ' log CD3', main = 'B cells -')
abline(v=c(6.25,4.5), col=c("blue","blue"), lty = 2) # cd3
abline(h=c(5.5,3), col=c("red", "red"), lty= 2) # cd19
bcells <- colnames(mat)[which(x < 4.5 & y > 5.5)] # get the col names that pass the cond
# which gives the indexes
tcells <- colnames(mat)[which(x > 6.25 & y < 3)]
tcells.mat <- mat[, which(x > 6.25 & y < 3)] # cd3+ and cd19- aka t cells
bcell.mat <- mat[, which(log(mat[1, ]) < 4.5 & log(mat[8, ]) > 5.5)]
x <- log(tcells.mat[2, ])
y <- log(tcells.mat[3, ])
plot(x, y, pch=20, ylab = 'log CD8a', xlab = ' log CD4', main = 'T cells')
abline(v=c(7,4.5), col=c("blue","blue"), lty = 2) # cd4
abline(h=c(6.5,5), col=c("red", "red"), lty= 2) # cd8a
# CD 4+
cd4tcells <- colnames(tcells.mat)[which(x > 7 & y < 5)]
# CD 8+   I guess the remaining 400 ish cells dont get classified. consistent
cd8tcells <- colnames(tcells.mat)[which(x < 4.5 & y > 6.5)]
notNeeded <- c(bcells,cd4tcells,cd8tcells)
remainingCells <- mat[, -which(colnames(mat) %in% notNeeded)] # take subset that are not in notNeeded
# use %in% instead bc different length vectors
x <- log(remainingCells[4, ]) # cd14
y <- log(remainingCells[6, ]) # cd16
monocyte.plot <- plot(x, y, pch=20, xlab = 'log CD14', ylab = 'log CD16', main = 'Monocytes -')
abline(v=c(6,4), col=c("blue","blue"), lty = 2)
abline(h=c(6,5), col=c("red", "red"), lty= 2)
cd14cells <- colnames(remainingCells)[which(x > 6 & y < 5)]
cd16.mat <- mat[, which(x < 4 & y > 6)]
x <- log(cd16.mat[7, ]) # cd 56
y <- log(cd16.mat[14, ]) # cd 127
View(cd16.mat)
nk.plot <- plot(x, y, pch=20, xlab = 'log cd56', ylab = 'log cd127', main = 'NK and CD16 Monocytes')
abline(v=c(5,3.5), col=c("blue","blue"), lty = 2)
abline(h=c(3,4), col=c("red","red"), lty = 2) # idk what the cutoff should be
nkcells <- colnames(cd16.mat)[which(x > 5 & y < 3.5)]
cd16cells <- colnames(cd16.mat)[which(x < 3.5 & y > 4)]
DC1 <- pbmc.rna@counts[c('CD1C','FCER1A'), ]
DC1.cells <- colnames(DC1)[which(DC1['CD1C', ] > 0 & DC1['FCER1A', ] > 0)] # take subset of col names
cd14.neg <- colnames(mat[, which(log(mat[4, ]) < 6)]) # CD14 - cutoff is 6
DC1.cells <- intersect(cd14.neg, DC1.cells)
DC2 <- as.matrix(pbmc.rna@counts[c('CD1C','HLA-DRB1'), ])
DC2.cells <- colnames(DC2)[which(DC2['CD1C', ] > 0 & DC2["HLA-DRB1", ] > 0)]
cd14.pos <- colnames(mat[, which(log(mat[4, ]) > 6)])
DC2.cells <- intersect(cd14.pos, DC2.cells)
intersect(DC1.cells, DC2.cells) # should be zero
pDC <- pbmc.rna@counts['IL3RA', ] # only grab the gene we care abt
pDC <- pDC[which(pDC > 0)] # this for now dk the plus cutoff
pDC.cells <- names(pDC)
rm(DC1, DC2, pDC) # clean up a little
rm(cd14.neg, cd14.pos)
dendtritic <- length(DC1.cells) + length(DC2.cells) + length(pDC.cells)
length(unique(clusteredCells))
length(bcells) + length(cd14cells) + length(cd16cells) + length(cd4tcells) + length(cd8tcells) + length(nkcells) + dendtritic
stuff <- c(bcells, cd14cells, cd16cells)
rm(stuff)
clusteredCells <- c(bcells, cd14cells, cd16cells, cd4tcells, cd8tcells, nkcells, DC1.cells, DC2.cells, pDC.cells)
length(unique(clusteredCells))
sub <- matrix(unique(clusteredCells), ncol=1) # take only classified cells
pbmcCombined <- pbmcCombined[, sub[, 1]]
pbmc.rna <- NormalizeData(pbmcCombined@assays$RNA)
pbmc.sal <- NormalizeData(pbmcCombined@assays$SAL)
# remove 3 protein markers from the ADT
SALcounts <- GetAssayData(pbmc.sal)
# select rows besides those listed
SALcounts <- SALcounts[-(which(rownames(SALcounts) %in% c('CD8a-TotalSeqB','CD16-TotalSeqB','CD127-TotalSeqB'))),]
pbmc.sal <- subset(pbmc.sal, features = rownames(SALcounts))
pbmc.rna <- FindVariableFeatures(pbmcCombined@assays$RNA, selection.method = "vst", nfeatures = 1000)
pbmc.rna <- ScaleData(pbmc.rna)
var_genes <- VariableFeatures(pbmc.rna)
rmatrix <- t(as.matrix(
GetAssayData(pbmc.rna)[var_genes,]
))
rm(var_genes)
smatrix <- t(as.matrix(pbmc.sal@counts))
rmatrix <- t(rmatrix)
smatrix <- t(smatrix)
# seven cell types
result4 <- BREMSC(smatrix, rmatrix, K=7, nChains=3, nMCMC=500)
View(rmatrix)
save(result4, file = "result4.Rdata")
table(result4$clusterID)
