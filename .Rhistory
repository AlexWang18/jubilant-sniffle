# this is an adjacency matrix. need to read up on matrix to graphs
library("igraph")
net.igraph <- graph_from_adjacency_matrix(fused)
rm(x)
plot(net.igraph)
View(net.igraph)
rm(old.dir)
View(data1)
View(net.igraph)
View(net.igraph)
View(net.igraph)
plot(net.igraph)
plot(net.igraph)
data(weight1)
View(data1)
# https://gitfront.io/r/user-2166014/baf4c26d1ab121f0e99f77d5a62f2a56d7155a36/scRNA-CITE-Fushion/# old ver
# 1. Construct patient similarity matrices for each data type using pairwise
# correlation
# 2. Patient similarity matrices are equivalent to patient similarity networks where
# patients are nodes and edges represent patients' pairwise similarities.
# 3. Starting with the patient similarity networks run the patient network fusion,
# iteratively updating each of the networks with the information from the
# other networks, making them more similar with each step.
# 4. The final fused network of patients to which the SNF process has converged.
# Edge color indicates which data type has contributed to the given similarity.
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
library(abSNF)
data(data1) # load in our dummy data
data(data2)
data(weight1)
data(weight2)
data1 = standardNormalization(data1) # put means to 0 and std to 1
data2 = standardNormalization(data2)
# Calculate the squared Euclidean Distance between the first 2 params given the w8s
distMatrix1 = dist2_w(as.matrix(data1),as.matrix(data1),weight1)
distMatrix2 = dist2_w(as.matrix(data2),as.matrix(data2),weight2)
graph1 = affinityMatrix(distMatrix1) # returns an affinity matrix from the distance matrix
graph2 = affinityMatrix(distMatrix2)
# the affinity matrixes represent the similarity graphs of the data points
list <- list(graph1, graph2)
fused = SNF(list, 20, 20) # 20 neighbors, 20 iterations of the diffusion
# this is an adjacency matrix. need to read up on matrix to graphs
library("igraph")
net.igraph <- graph_from_adjacency_matrix(fused)
# plot(net.igraph)
plot(net.igraph)
View(net.igraph)
View(net.igraph)
View(data1)
View(data1)
View(data2)
weight1
weight2
View(fused)
View(graph1)
View(fused)
View(fused)
View(data1)
View(data1)
rm(list=ls(all.names = TRUE))
library(Seurat)
install.packages('Seurat')
library(Seurat)
library(dplyr)
library(patchwork)
pbmc.data <- Read10X(data.dir = "../data/pbmc3k/filtered_gene_bc_matrices/hg19/")
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19/")
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
list.files("./data/filtered_gene_bc_matrices/hg19/")
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
list.dirs()
getwd()
cd Users\alexw\school\r-work\seuratTutorial\
cd 'Users\alexw\school\r-work\seuratTutorial\'
cd 'alexw\school\r-work\seuratTutorial'
cd alexw\school\r-work\seuratTutorial
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
source('C:/Users/alexw/School/R-work/seuratTutorial/seurat.R', echo=TRUE)
getwd()
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
install.packages(installr)
install.packages('installr')
library(installr)
updateR()
source("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
load("C:/Users/alexw/AppData/Local/Temp/sampleIntegratedSC_1_Step1.Rdata")
source("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
source('C:/Users/alexw/School/R-work/SimilarityNetwork/RNA-SAL-SNF.R', echo=TRUE)
readRDS("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
source("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
source('C:/Users/alexw/School/R-work/SimilarityNetwork/RNA-SAL-SNF.R', echo=TRUE)
source(C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata)
cource('C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata')
source('C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata')
install.packages('SeuratDisk')
library(SeuratDisk)
install_github("mojaveazure/seurat-disk")
install_github("mojaveazure/seurat-disk")
install_github("pfruan/abSNF", force=TRUE)
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(seurat-disk)
library(seuratDisk)
install_github("mojaveazure/seurat-disk")
data <- load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
l\
getwd()
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(abSNF)
library(Seurat)
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(abSNF)
library(Seurat)
library(SeuratDisk)
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
library(abSNF)
library(Seurat)
library(SeuratDisk)
if(!require(devtools)) install.packages("devtools")
init()
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
sampleIntegrated <- NormalizeData(sampleIntegrated)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 1000)
rna <- ScaleData(object = rna)
scaledRNA <- rna@scale.data
head(scaledRNA, 10)
rna <- RunPCA(rna, features = VariableFeatures(object = rna)) # why is returning at DimReduc
sal <- sampleIntegrated@assays$SAL@counts
sal <- NormalizeData(sal)
# calc boosted distance
scaledRNA <- t(scaledRNA)
sal <- t(as.matrix(sal))
rna2 <- rdist(scaledRNA, metric = "euclidean", p = 2L)
sal2 <- rdist(sal, metric = "euclidean", p = 2L)
# Next, construct similarity graphs
graphRNA = affinityMatrix(rna2)
graphSAL= affinityMatrix(sal2)
list <- list(graphRNA, graphSAL) # each element of the list should be a square
fused = SNF(list, 20, 20) # 20 neighbors, 20 iterations of the diffusion
#
W = SNF(list(W1,W2), 20, 20)
k
l
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
sampleIntegrated <- NormalizeData(sampleIntegrated)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 1000)
rna <- ScaleData(object = rna)
scaledRNA <- rna@scale.data
head(scaledRNA, 10)
rna <- RunPCA(rna, features = VariableFeatures(object = rna)) # why is returning at DimReduc
sal <- sampleIntegrated@assays$SAL@counts
sal <- NormalizeData(sal)
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
sampleIntegrated <- NormalizeData(sampleIntegrated)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
rna <- NormalizeData(rna)
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 1000)
rna <- ScaleData(object = rna)
scaledRNA <- rna@scale.data
head(scaledRNA, 10)
rna <- RunPCA(rna, features = VariableFeatures(object = rna)) # why is returning at DimReduc
sal <- sampleIntegrated@assays$SAL@counts
sal <- NormalizeData(sal)
rna2 <- rdist(scaledRNA, metric = "euclidean", p = 2)
nice
kl
rna2
rna2 <- pdist(scaledRNA, metric = "euclidean", p = 2)
d
h
rna2
View(rna2)
sal2 <- pdist(sal, metric = "euclidean", p = 2)
View(sal2)
# Next, construct similarity graphs
graphRNA = affinityMatrix(rna2)
graphSAL= affinityMatrix(sal2)
View(graphRNA)
View(sampleIntegrated)
View(sampleIntegrated)
sampleIntegrated$nCount_SAL
sampleIntegrated$nFeature_SAL
sampleIntegrated@graphs$integrated_nn
salDist <- pdist(sal, metric = "euclidean", p = 2)
getClass(salDist)
View(sal2)
getClass(sal2, FORCE=TRUE)
nrow(sal2)
nrow(rna2)
rnaDist <- rna2
rm(rna2)
rnaDist
nrows(rna)
nrow(rna)
View(scaledRNA)
View(scaledRNA)
View(sal)
as
f
View(rnaDist)
View(rnaDist)
nrow(rnaDist)
nrow(rna)
nrow(scaledRNA)
rm(sal2)
nrow(salDist)
init <- function() {
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github("pfruan/abSNF", force=TRUE)
install_github("mojaveazure/seurat-disk")
install.packages('rdist')
library('rdist')
library(abSNF)
library(Seurat)
library(SeuratDisk)
gc()
}
init()
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
rna <- sampleIntegrated@assays$RNA
sal <- sampleIntegrated@assays$SAL@counts
sal <- sampleIntegrated@assays$SAL
sal@scale.data
View(sal)
View(rna)
view(rna@counts)
View(rna@counts)
rna@counts
view(rna@counts)
view(rna@counts)
view(rna@counts)
view(rna@data)
stuff <- rna@counts
View(stuff)
rna[]
rna[colnames()]
rna[colnames(rna)]
colnames(rna)
,!
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
pbmc <- subset(rna, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
sampleIntegrated$nCount_RNA
sampleIntegrated$
pbmc <- subset(rna, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 2500)
#sampleIntegrated <- ScaleData(object = sampleIntegrated)
sampleIntegrated <- subset(sampleIntegrated, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
View(sampleIntegrated)
View(sampleIntegrated)
sampleIntegrated <- NormalizeData(sampleIntegrated, normalization.method = "LogNormalize")
cluster.averages <- AverageExpression(sampleIntegrated)
head(cluster.averages[["RNA"]][, 1:5])
rna <- sampleIntegrated@assays$RNA
rna@counts
rna@counts@i
sampleIntegrated$nCount_RNA
sampleIntegrated@project.name
sampleIntegrated@assays$SAL@var.features
sampleIntegrated@assays$RNA@var.features
install.packages('tidyverse')
install.packages('tidyverse')
gc()
install.packages('tidyverse')
install.packages('tidyverse')
install.packages(tidyseurat)
install.packages('tidyseurat')
help("::")
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
gc()
tidyseurat::sampleIntegrated
tidyseurat::pbmc_small
pbmc_small <_ tidyseurat::pbmc_small
pbmc_small <- tidyseurat::pbmc_small
pbmc_small
pbmc_small@assays$RNA
pbmc_small_pca <-
pbmc_small_polished %>%
SCTransform(verbose = FALSE) %>%
FindVariableFeatures(verbose = FALSE) %>%
RunPCA(verbose = FALSE)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
view(sampleIntegrated@assays$RNA)
view(sampleIntegrated@assays$RNA)
view(sampleIntegrated@assays$RNA@counts)
View(sampleIntegrated@assays$RNA@counts)
sampleIntegrated@assays$RNA@counts
NormalizeData(object = sampleIntegrated, assay = "RNA")
NormalizeData(object = sampleIntegrated, assay = "RNA")
library(Seurat)
NormalizeData(object = sampleIntegrated, assay = "RNA")
rna <- sampleIntegrated@assays$RNA
rna <- FindVariableFeatures(object = rna, selection.method = 'vst', nfeatures = 2000) # ideally a 5 to 1 cell to feature?
sampleIntegrated[[]]
sampleIntegrated <- FindVariableFeatures(object = sampleIntegrated, selection.method = 'vst', nfeatures = 1000)
sampleIntegrated@assays$RNA@var.features
sampleIntegrated[['percent_mito']]
sampleIntegrated[['nFeature_HTO']]
sampleIntegrated[['nFeature_SAL']]
sampleIntegrated[['nFeature_RNA']]
sampleIntegrated[['origin_indent']]
sampleIntegrated[['origin_inden']]
sampleIntegrated[['nCount_RNA']]
cov(rna)
?cova
?cov
cov(rna@counts)
cov(rna@data)
rna
rna@scale.data
rna@counts
cov(as.matrix(rna@counts))
library(Seurat)
memory.limit(9999999999)
load("C:/Users/alexw/School/R-work/SimilarityNetwork/sampleIntegratedSC_1_Step1.Rdata")
sampleIntegrated['percent_mt']
sampleIntegrated$percent.mt
sampleIntegrated[percent_mt]
sampleIntegrated[['ribosomal']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RT-")
sampleIntegrated$ribosomal
sampleIntegrated[['ribosomal']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RPS")
sampleIntegrated$ribosomal
sampleIntegrated[['RPS']] <- PercentageFeatureSet(sampleIntegrated, pattern = "^RPS")
sampleIntegrated$RPS
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
VlnPlot(sampleIntegrated, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# select only cells which have over 200 RNA genes but less than 2500. and cells that contain over 1000 UMIs
selected <- WhichCells(sampleIntegrated, expression = nCount_RNA > 1000 & nFeature_RNA > 1000 & nFeature_RNA < 3000 & percent.mt < 5)
plot2
plot1
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = RNA)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays$RNA, feature1 = "nCount_RNA", feature2 = "percent.mt", cells)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays$RNA, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated@assays, feature1 = "nCount_RNA", feature2 = "percent.mt")
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = sampleIntegrated@assays$RNA)
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "percent.mt", feature2 = "nFeature_RNA")
plot2
# select only cells which have over 200 RNA genes but less than 2500. and cells that contain over 1000 UMIs
selected <- WhichCells(sampleIntegrated, expression = nCount_RNA > 1000 & nFeature_RNA > 1000 & nFeature_RNA < 3000 & percent.mt >1.5)
rownames(sampleIntegrated[['ADT']])
rownames(sampleIntegrated[['SAL']])
rownames(sampleIntegrated[['RNA']])
DefaultAssay(sampleIntegrated)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", cells = sampleIntegrated@assays$RNA)
#s2 = sampleIntegrated[rowSums(sampleIntegrated) != 0, ] # remove genes never expressed by any cell
plot1 <- FeatureScatter(sampleIntegrated, feature1 = "nCount_RNA", feature2 = "percent.mt", pt.size = 1)
plot1
plot2 <- FeatureScatter(sampleIntegrated, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = .5)
plot2
colnames(sampleIntegrated)
rownames(sampleIntegrated)
sampleIntegrated[percent_mt]
sampleIntegrated[['percent_mt']]
sampleIntegerated <- NormalizeData(object = sampleIntegrated, assay = "RNA") # make sure they are on comparable scale
library('rdist')
b <- 10:15
b
b[1, 2+1, ]
b[1, 2+1 ]
b[1: 2+1 ]
b[1: 2+1,  ]
b[1: 2+1, ]
b[1:2+1, ]
b[1:2, ]
b[1:2]
b[2:2]
b[2:5]
b <- 15: 11
b
apply(b, 1, sort)
lapply(b, 1, sort)
lapply(b, sort)
b<- lapply(b, sort)
b
b
class(b)
b[1]
b[[2]]
b$2
b[[2]]
b<- lapply(b, sort(decreasing = TRUE))
b<- lapply(b, sort(b,decreasing = TRUE))
D = matrix(runif(400), nrow=20)
D
class(d)
class(D)
sortedColumns <- as.matrix(t(apply(D, 2, sort)))
sortedColumns
View(sortedColumns)
sortedColumns[, 1:15]
dim(D[1])
dim(D)
1:dim(x)[1]
1:dim(D)[1]
D[, 2]
View(D)
D[3, ] <- 10
D[3, ]
D[3, 2:3 ] <- 1:2
D[3, ]
diag(m)
diag(D)
setwd("C:/Users/alexw/School/R-work/BREM")
data <- Read10X("./filtered_feature_bc_matrix")
library(Seurat)
data <- Read10X("./filtered_feature_bc_matrix")
pbmc.rna <- CreateAssayObject(counts = data$`Gene Expression`)
View(pbmc.rna)
pbmc.sal <- CreateAssayObject(counts = data$`Antibody Capture`)
pbmcCombined <- CreateSeuratObject(counts = pbmc.rna)
